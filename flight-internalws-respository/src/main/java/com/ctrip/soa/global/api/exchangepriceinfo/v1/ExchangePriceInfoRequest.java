/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.exchangepriceinfo.v1;

import com.ctrip.soa.global.api.comm.head.v1.Currency;
import com.ctrip.soa.global.api.comm.head.v1.Head;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 多币种转换请求
 */
@DtoDoc("多币种转换请求")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "ExchangePriceInfoRequest", namespace = "http://soa.ctrip.com/Global/API/ExchangePriceInfo/v1")
@XmlType(name = "ExchangePriceInfoRequest", propOrder = {
    "head",
    "sourceCurrency",
    "targetCurrency",
    "exchangeRate",
    "flightClass",
    "needEXPriceInfo"
})
@SuppressWarnings("all")
public class ExchangePriceInfoRequest  {

    private static final long serialVersionUID = 1L;

    public ExchangePriceInfoRequest(
        Head head, 
        Currency sourceCurrency, 
        Currency targetCurrency, 
        BigDecimal exchangeRate, 
        String flightClass, 
        List<ExchangePriceInfo> needEXPriceInfo) {
        this.head = head;
        this.sourceCurrency = sourceCurrency;
        this.targetCurrency = targetCurrency;
        this.exchangeRate = exchangeRate;
        this.flightClass = flightClass;
        this.needEXPriceInfo = needEXPriceInfo;
    }

    public ExchangePriceInfoRequest() {
    }

    @FieldDoc("request头信息")
    @JsonProperty("Head")
    @XmlElement(name = "Head")
    private Head head;

    @FieldDoc("原币种,默认是人名币,非必传")
    @JsonProperty("SourceCurrency")
    @XmlElement(name = "SourceCurrency")
    private Currency sourceCurrency;

    @FieldDoc("目标币种,必传")
    @JsonProperty("TargetCurrency")
    @XmlElement(name = "TargetCurrency")
    private Currency targetCurrency;

    @FieldDoc("目标币种汇率,如果不传,可通过TargetCurrency获取实时汇率")
    @JsonProperty("ExchangeRate")
    @XmlElement(name = "ExchangeRate")
    private BigDecimal exchangeRate;

    @FieldDoc("航线类型,I为国际,其它为国内,默认国际,国际国内的外卡手续费转换缩进不一样")
    @JsonProperty("FlightClass")
    @XmlElement(name = "FlightClass")
    private String flightClass;

    @FieldDoc("需要计算的价格list")
    @JsonProperty("NeedEXPriceInfo")
    @XmlElement(name = "NeedEXPriceInfo")
    private List<ExchangePriceInfo> needEXPriceInfo;

    /**
     * request头信息
     */
    public Head getHead() {
        return this.head;
    }

    public void setHead(Head head) {
        this.head = head;
    }

    /**
     * 原币种,默认是人名币,非必传
     */
    public Currency getSourceCurrency() {
        return this.sourceCurrency;
    }

    public void setSourceCurrency(Currency sourceCurrency) {
        this.sourceCurrency = sourceCurrency;
    }

    /**
     * 目标币种,必传
     */
    public Currency getTargetCurrency() {
        return this.targetCurrency;
    }

    public void setTargetCurrency(Currency targetCurrency) {
        this.targetCurrency = targetCurrency;
    }

    /**
     * 目标币种汇率,如果不传,可通过TargetCurrency获取实时汇率
     */
    public BigDecimal getExchangeRate() {
        return this.exchangeRate;
    }

    public void setExchangeRate(BigDecimal exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    /**
     * 航线类型,I为国际,其它为国内,默认国际,国际国内的外卡手续费转换缩进不一样
     */
    public String getFlightClass() {
        return this.flightClass;
    }

    public void setFlightClass(String flightClass) {
        this.flightClass = flightClass;
    }

    /**
     * 需要计算的价格list
     */
    public List<ExchangePriceInfo> getNeedEXPriceInfo() {
        return this.needEXPriceInfo;
    }

    public void setNeedEXPriceInfo(List<ExchangePriceInfo> needEXPriceInfo) {
        this.needEXPriceInfo = needEXPriceInfo;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ExchangePriceInfoRequest other = (ExchangePriceInfoRequest)obj;
        return
            Objects.equal(this.head, other.head) && 
            Objects.equal(this.sourceCurrency, other.sourceCurrency) && 
            Objects.equal(this.targetCurrency, other.targetCurrency) && 
            Objects.equal(this.exchangeRate, other.exchangeRate) && 
            Objects.equal(this.flightClass, other.flightClass) && 
            Objects.equal(this.needEXPriceInfo, other.needEXPriceInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.head);
        result = 31 * result + Objects.hashCode(this.sourceCurrency);
        result = 31 * result + Objects.hashCode(this.targetCurrency);
        result = 31 * result + Objects.hashCode(this.exchangeRate);
        result = 31 * result + Objects.hashCode(this.flightClass);
        result = 31 * result + Objects.hashCode(this.needEXPriceInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("head", head)
            .add("sourceCurrency", sourceCurrency)
            .add("targetCurrency", targetCurrency)
            .add("exchangeRate", exchangeRate)
            .add("flightClass", flightClass)
            .add("needEXPriceInfo", needEXPriceInfo)
            .toString();
    }
}