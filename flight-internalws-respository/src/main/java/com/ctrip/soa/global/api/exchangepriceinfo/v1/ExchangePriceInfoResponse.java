/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.exchangepriceinfo.v1;

import com.ctrip.soa.global.api.comm.head.v1.Currency;
import com.ctriposs.baiji.rpc.common.HasResponseStatus;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.rpc.common.types.ResponseStatusType;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "ExchangePriceInfoResponse", namespace = "http://soa.ctrip.com/Global/API/ExchangePriceInfo/v1")
@XmlType(name = "ExchangePriceInfoResponse", propOrder = {
    "responseStatus",
    "sourceCurrency",
    "targetCurrency",
    "exchangeRate",
    "targetCurrencyChar",
    "prcessedEXPriceInfo"
})
@SuppressWarnings("all")
public class ExchangePriceInfoResponse implements HasResponseStatus {

    private static final long serialVersionUID = 1L;

    public ExchangePriceInfoResponse(
        ResponseStatusType responseStatus, 
        Currency sourceCurrency, 
        Currency targetCurrency, 
        BigDecimal exchangeRate, 
        String targetCurrencyChar, 
        List<ExchangePriceInfo> prcessedEXPriceInfo) {
        this.responseStatus = responseStatus;
        this.sourceCurrency = sourceCurrency;
        this.targetCurrency = targetCurrency;
        this.exchangeRate = exchangeRate;
        this.targetCurrencyChar = targetCurrencyChar;
        this.prcessedEXPriceInfo = prcessedEXPriceInfo;
    }

    public ExchangePriceInfoResponse() {
    }

    @JsonProperty("ResponseStatus")
    @XmlElement(name = "ResponseStatus")
    private ResponseStatusType responseStatus;

    @FieldDoc("原币种,默认是人名币")
    @JsonProperty("SourceCurrency")
    @XmlElement(name = "SourceCurrency")
    private Currency sourceCurrency;

    @FieldDoc("目标币种,必传")
    @JsonProperty("TargetCurrency")
    @XmlElement(name = "TargetCurrency")
    private Currency targetCurrency;

    @FieldDoc("目标币种汇率,如果request不传,通过TargetCurrency获取实时汇率")
    @JsonProperty("ExchangeRate")
    @XmlElement(name = "ExchangeRate")
    private BigDecimal exchangeRate;

    @FieldDoc("目标币种显示符号,目前不能使用货币符号,按照英网规则用iso code")
    @JsonProperty("TargetCurrencyChar")
    @XmlElement(name = "TargetCurrencyChar")
    private String targetCurrencyChar;

    @FieldDoc("计算过的价格list")
    @JsonProperty("PrcessedEXPriceInfo")
    @XmlElement(name = "PrcessedEXPriceInfo")
    private List<ExchangePriceInfo> prcessedEXPriceInfo;

    public ResponseStatusType getResponseStatus() {
        return this.responseStatus;
    }

    public void setResponseStatus(ResponseStatusType responseStatus) {
        this.responseStatus = responseStatus;
    }

    /**
     * 原币种,默认是人名币
     */
    public Currency getSourceCurrency() {
        return this.sourceCurrency;
    }

    public void setSourceCurrency(Currency sourceCurrency) {
        this.sourceCurrency = sourceCurrency;
    }

    /**
     * 目标币种,必传
     */
    public Currency getTargetCurrency() {
        return this.targetCurrency;
    }

    public void setTargetCurrency(Currency targetCurrency) {
        this.targetCurrency = targetCurrency;
    }

    /**
     * 目标币种汇率,如果request不传,通过TargetCurrency获取实时汇率
     */
    public BigDecimal getExchangeRate() {
        return this.exchangeRate;
    }

    public void setExchangeRate(BigDecimal exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    /**
     * 目标币种显示符号,目前不能使用货币符号,按照英网规则用iso code
     */
    public String getTargetCurrencyChar() {
        return this.targetCurrencyChar;
    }

    public void setTargetCurrencyChar(String targetCurrencyChar) {
        this.targetCurrencyChar = targetCurrencyChar;
    }

    /**
     * 计算过的价格list
     */
    public List<ExchangePriceInfo> getPrcessedEXPriceInfo() {
        return this.prcessedEXPriceInfo;
    }

    public void setPrcessedEXPriceInfo(List<ExchangePriceInfo> prcessedEXPriceInfo) {
        this.prcessedEXPriceInfo = prcessedEXPriceInfo;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ExchangePriceInfoResponse other = (ExchangePriceInfoResponse)obj;
        return
            Objects.equal(this.responseStatus, other.responseStatus) && 
            Objects.equal(this.sourceCurrency, other.sourceCurrency) && 
            Objects.equal(this.targetCurrency, other.targetCurrency) && 
            Objects.equal(this.exchangeRate, other.exchangeRate) && 
            Objects.equal(this.targetCurrencyChar, other.targetCurrencyChar) && 
            Objects.equal(this.prcessedEXPriceInfo, other.prcessedEXPriceInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.responseStatus);
        result = 31 * result + Objects.hashCode(this.sourceCurrency);
        result = 31 * result + Objects.hashCode(this.targetCurrency);
        result = 31 * result + Objects.hashCode(this.exchangeRate);
        result = 31 * result + Objects.hashCode(this.targetCurrencyChar);
        result = 31 * result + Objects.hashCode(this.prcessedEXPriceInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("responseStatus", responseStatus)
            .add("sourceCurrency", sourceCurrency)
            .add("targetCurrency", targetCurrency)
            .add("exchangeRate", exchangeRate)
            .add("targetCurrencyChar", targetCurrencyChar)
            .add("prcessedEXPriceInfo", prcessedEXPriceInfo)
            .toString();
    }
}